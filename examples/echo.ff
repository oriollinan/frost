import "./examples/std/io.ff"
import "./examples/std/socket.ff"
import "./examples/std/lib.ff"

in_addr :: struct {
    s_addr -> int64
}

sockaddr_in :: struct {
    sin_len -> int8
    sin_family -> int8
    sin_port -> int16
    sin_addr -> in_addr
    sin_zero -> [8]int8
}

main: never -> int = {
    PORT: int = 8000
    BUFFER_SIZE: int = 1024

    SIZEOF_ADDR: int = 16

    AF_INET: int = 2
    INADDR_ANY: int = 0
    SOCK_STREAM: int = 1

    server_fd: int = 0
    new_socket: int = 0

    address: sockaddr_in = sockaddr_in {
        sin_len = 0
        sin_family = 0
        sin_port = 0
        sin_addr = in_addr { s_addr = 0 }
        sin_zero = [0 0 0 0 0 0 0 0]
    }

    % TODO: Test this once #166 is closed
    address.sin_len = SIZEOF_ADDR
    address.sin_family = AF_INET
    address.sin_port = htons(PORT)
    address.sin_addr.s_addr = INADDR_ANY

    buffer: *byte = malloc(BUFFER_SIZE)
    defer free(buffer)

    if not buffer {
        perror("malloc")
        ret 1
    }

    server_fd = socket(AF_INET 1 0)
    defer {
        if server_fd > 0 {
            close(server_fd)
        }
    }

    if bind(server_fd address.& SIZEOF_ADDR) < 0 {
        perror("bind")
        ret 1
    }

    if listen(server_fd 3) < 0 {
        perror("listen")
        ret 1
    }

    printf("Listening on port %d\n" PORT)

    new_socket = accept(server_fd address.& SIZEOF_ADDR.&)
    defer {
        if new_socket > 0 {
            close(new_socket)
        }
    }

    if new_socket < 0 {
        perror("accept")
        ret 1
    }

    printf("Connection accepted\n")

    loop true {
        read_size: int = recv(new_socket buffer BUFFER_SIZE 0)
        if read_size == 0 {
            stop
        }
        
        if read_size < 0 {
            perror("recv")
            stop
        }

        send(new_socket buffer read_size 0)
    }

    0
}
