%%
% Generate a Julia set fractal animation.
%%

%%
% Standard Library
%%
import "std/io.ff"
import "std/math.ff"
import "std/uni.ff"

%%
% Function to clear the screen
%%
clear_screen: never -> int = {
    printf("\x1b[H")
}

%%
% Function to render the Julia set for a given complex number
%
% The function renders the Julia set for the complex number c_real + c_imag * i.
% The Julia set is rendered to the terminal using ASCII characters. The function
% returns 0 when done.
%%
render_julia: double double -> int = c_real c_imag {
    SET_WIDTH: int = 160
    SET_HEIGHT: int = 40
    MAX_ITER: int = 1000
    ASCII_CHARSET: *byte = "@%#*+=-:. "
    CHARSET_LENGTH: int = 10

    REAL_MIN: double = -1,5
    REAL_MAX: double = 1,5
    IMAG_MIN: double = -1,5
    IMAG_MAX: double = 1,5

    from 0 to SET_HEIGHT by 1 |y: int| {
        from 0 to SET_WIDTH by 1 |x: int| {
            zx: double = REAL_MIN + (REAL_MAX - REAL_MIN) * @double(x) / @double(SET_WIDTH - 1)
            zy: double = IMAG_MIN + (IMAG_MAX - IMAG_MIN) * @double(y) / @double(SET_HEIGHT - 1)

            iter: int = 0

            loop (zx * zx + zy * zy < 4,0) and (iter < MAX_ITER) {
                temp: double = zx * zx - zy * zy + c_real
                zy = 2,0 * zx * zy + c_imag
                zx = temp
                iter = iter + 1
            }

            char_index: int = 0

            if iter is MAX_ITER {
                char_index = CHARSET_LENGTH - 1
            } else {
                char_index = iter * CHARSET_LENGTH / MAX_ITER
            }

            ptr: *byte = ASCII_CHARSET + char_index

            printf("%c" ptr.*)
        }
        printf("\n" 0)
    }

    0
}

%%
% Main function
%
% The main function generates a Julia set fractal animation by rendering the Julia
% set for a series of complex numbers. The complex numbers are generated by moving
% in a circular motion with radius 0.4, centered at (-0.4, 0). This ensures that
% we stay in more interesting regions of the Julia set.
%%
main: never -> int = {
    FRAME_DELAY: int = 50000
    PI: double = 3,14159265359
    t: double = 0,0

    loop true {
        clear_screen()

        c_real: double = -0,4 + 0,4 * cos(t)
        c_imag: double = 0,4 * sin(t)

        render_julia(c_real c_imag)

        t = t + 0,05
        if t > 2,0 * PI {
            t = 0,0
        }

        usleep(FRAME_DELAY)
    }

    0
}
