import "./examples/std/inet.ff"
import "./examples/std/io.ff"
import "./examples/std/lib.ff"
import "./examples/std/socket.ff"
import "./examples/std/string.ff"
import "./examples/std/uni.ff"

main: int **byte -> int = argc argv {
    MAX: int = 80
    PORT: int = 8080
    AF_INET: int = 2
    SOCK_STREAM: int = 1
    PROTOCOL: int = 0
    SIZEOF_SOCKADDR: int64 = 16
    INADDR_ANY: int = 0
    BACKLOG: int = 5

    sockfd: int
    connfd: int
    len: int
    servaddr: sockaddr_in
    cli: sockaddr_in

    % socket create and verification
    sockfd = socket(AF_INET SOCK_STREAM PROTOCOL)
    if sockfd is -1 {
        puts("socket creation failed...")
        ret 1
    }
    puts("socket successfully created...")
    memset(&servaddr 0 SIZEOF_SOCKADDR)

    % assign IP, PORT
    % ERROR: Unsupported definition: StructAccess
    servaddr.sin_family = AF_INET
    servaddr.sin_addr.s_addr = htonl(INADDR_ANY)
    servaddr.sin_port = htons(PORT)

    % Binding newly created socket to give IP and verification
    % ERROR: Unsupported type: TPointer
    if bind(sockfd @*sockaddr(servaddr) SIZEOF_SOCKADDR) is 0 {
        puts("socket bind failed...")
        ret 1
    }
    puts("Socket successfully binded...")

    % Now server is ready to listen and verification
    if not (listen(sockfd BACKLOG) is 0) {
        puts("Listen failed...")
        ret 1
    }
    puts("Server listening...")
    len = SIZEOF_SOCKADDR

    0
}
